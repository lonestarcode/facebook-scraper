name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/**'
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan

jobs:
  backend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          
      - name: Run linters
        run: |
          cd backend
          flake8 src tests
          black --check src tests
          isort --check-only src tests

  backend-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install security dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Run security checks
        run: |
          cd backend
          bandit -r src/
          safety check
          
      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: marketplace_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Chrome
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install ./google-chrome-stable_current_amd64.deb
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .
          
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          DATABASE_URL: postgresql://test:test@localhost:5432/marketplace_test
        run: |
          cd backend
          pytest tests/ -v --cov=src

  frontend-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install
          
      - name: Run linters
        run: |
          cd frontend
          npm run lint

  backend-build:
    needs: [backend-lint, backend-security, backend-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/marketplace-scraper-backend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/marketplace-scraper-backend:${{ github.sha }}

  frontend-build:
    needs: [frontend-lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/marketplace-scraper-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/marketplace-scraper-frontend:${{ github.sha }}

  deploy:
    needs: [backend-build, frontend-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster marketplace-cluster \
                                --service marketplace-service \
                                --force-new-deployment